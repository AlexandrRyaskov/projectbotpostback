version: "3.9"

services:
  api:
    profiles: [ "api" ]
    container_name: user_service.api
    image: user_service
    build:
      context: .
    restart: unless-stopped
    expose:
      - "5000"
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - user_service.postgres.network
    command: ["python", "-Om", "src.bot"]
    healthcheck:
      test: ["CMD-SHELL", "curl -fsSL http://localhost:5000/healthcheck"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

  api:
    profiles: [ "api" ]
    container_name: user_service.api
    image: user_service
    build:
      context: .
    restart: unless-stopped
    expose:
      - "5000"
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - user_service.postgres.network
    command: [ "python", "-Om", "src.bot" ]
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsSL http://localhost:5000/healthcheck" ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s


  postgres:
    profiles: [ "api" ]
    container_name: user_service.postgres
    image: "postgres:16-alpine"
    hostname: user_service.postgres
    restart: unless-stopped
    expose:
      - "5432"
    ports:
      - "127.0.0.1:15432:5432"
    networks:
      - user_service.postgres.network
    environment:
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_USER: ${POSTGRES_USER:-$USER}
      POSTGRES_DB: ${POSTGRES_DB:-$USER}
    volumes:
      - user_service.postgres.data:/var/lib/postgresql/users:rw
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

volumes:
  user_service.postgres.data: {}

networks:
  user_service.postgres.network: {}
